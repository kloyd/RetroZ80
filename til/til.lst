                        ; *****  TIL
                        ; Outer Interpreter
                        ; Author Kelly Loyd
                        ; Target System
                        ;   Z80 CP/M 64K RAM
                        ; ***

                        ; Non Standard Z80 MC
      = 0000            STD_CPM	EQU 0

                        ;---------- Put in CP/M Transient Memory space.
0100                    	ORG	100h

                        ;---------- START/RESTART
0100  11 8404           START	LD	DE,RSTMSG
0103  3A BF02           	LD	A,(BASE)
0106  A7                	AND	A
0107  20 08             	JR	NZ, ABORT
0109  3E 0A             	LD	A,10
010B  32 BF02           	LD	(BASE),A
010E  11 9104           	LD	DE,SRTMSG
0111  31 0080           ABORT	LD	SP,STACK
0114  D5                	PUSH	DE
0115  21 0000           	LD	HL,0
0118  22 C002           	LD	(MODE),HL
011B  FD21 4901         	LD	IY,NEXT
011F  DD21 7A02         	LD	IX,RETURN
0123  21 8080           	LD	HL,8080h
0126  22 8004           	LD	(LBEND),HL
0129  01 2F01           	LD	BC,OUTER	; Effectively, Set OUTER as the next routine
012C  C3 4901           	JP	NEXT		; Call NEXT in the Inner Interpreter, which will load address of OUTER and Jump to it.

                        ; Entry point of OUTER interpreter.
012F  6301              OUTER	DW	TYPE
0131  7701              	DW	INLINE
0133  CF01              	DW	ASPACE
0135  DD01              	DW	TOKEN
0137  5D02              	DW	TILHALT
0139  4E02              	DW 	QSEARCH	; Leaves something on the stack if found or not found?
013B  5802              	DW	@IF

                        ; --------- Inner Interpreter
013D  3F01              SEMI	DW	$ + 2
013F  DD4E 00           	LD	C,(IX+0)
0142  DD23              	INC	IX
0144  DD46 00           	LD	B,(IX+0)
0147  DD23              	INC	IX
0149  0A                NEXT	LD	A,(BC)	; BC = Instruction Register
014A  6F                	LD	L,A	; @I -> WA (HL = word address)
014B  03                	INC	BC
014C  0A                	LD	A,(BC)
014D  67                	LD	H,A
014E  03                	INC	BC	; I = I + 2
014F  5E                RUN	LD	E,(HL)	; @WA -> CA (Code Address)
0150  23                	INC	HL	; WA = WA + 2
0151  56                	LD	D,(HL)
0152  23                	INC	HL
0153  EB                	EX	DE,HL	; CA -> PC
0154  E9                	JP	(HL)

0155  DD2B              COLON	DEC	IX
0157  DD70 00           	LD	(IX+0),B
015A  DD2B              	DEC	IX
015C  DD71 00           	LD	(IX+0),C
015F  4B                	LD	C,E
0160  42                	LD	B,D
0161  FDE9              	JP	(IY)
                        ;----------- End of Inner -----

                        ; TYPE - String with length byte (0a1234567890) printed to console.
0163  6501              TYPE	DW	$ + 2
0165  D1                TYPEIT	POP	DE	; get address of string
0166  E5                	PUSH	HL 	; save WA
0167  C5                	PUSH	BC	; Save IR.
0168  EB                	EX	DE,HL
0169  46                	LD	B,(HL)
016A  23                	INC	HL
016B  7E                ONECHAR	LD	A,(HL)
016C  CD 9202           	CALL	_ECHO
016F  23                	INC	HL
0170  10 F9             	DJNZ	ONECHAR
0172  C1                	POP	BC	; Restore IR
0173  E1                	POP	HL	; Restore WA
0174  C3 4901           	JP	NEXT




                        ; INLINE
0177  7901              INLINE	DW	$ + 2	;header address
0179  C5                	PUSH	BC	; Save IR
017A  CD B202           ISTART	CALL	_CRLF	; Issue CR / LF on terminal for new input
017D  21 0004           	LD	HL, LBADD	; Buffer
0180  22 C102           	LD	(LBP), HL
0183  06 80             	LD	B, LENGTH
0185  36 20             CLEAR	LD	(HL), SPACE
0187  23                	INC	HL
0188  10 FB             	DJNZ	CLEAR
018A  2E 00             ZERO	LD	L,0
018C  CD A002           INKEY	CALL	_KEY
018F  FE 18             	CP	LINEDEL		; CTRL-X is Line Delete
0191  20 05             	JR	NZ,TSTBS
0193  CD 9202           	CALL	_ECHO
0196  18 E2             	JR ISTART
0198  FE 08             TSTBS	CP	BKSP		; backspace CTRL-H
019A  20 0B             	JR	NZ, TSTCR
019C  2B                	DEC	HL
019D  FA 8A01           	JP	M,ZERO
01A0  36 20             	LD	(HL), SPACE
01A2  CD 9202           ISSUE	CALL	_ECHO
01A5  18 E5             	JR	INKEY
01A7  FE 0D             TSTCR	CP	CR
01A9  28 1C             	JR	Z,LAST1
01AB  CB7D              	BIT	7,L
01AD  20 0E             	JR	NZ,IEND
01AF  77                SAVEIT	LD	(HL),A
01B0  FE 61             	CP	61H	; Less than LC A ?
01B2  38 06             	JR	C,NOTLC
01B4  FE 7B             	CP	7BH	; MORE THAN LC Z?
01B6  30 02             	JR	NC,NOTLC
01B8  CBAE              	RES	5,(HL)
01BA  2C                NOTLC	INC	L
01BB  18 E5             	JR	ISSUE
01BD  2D                IEND	DEC	L
01BE  4F                	LD	C,A
01BF  3E 08             	LD	A,BKSP
01C1  CD 9202           	CALL	_ECHO
01C4  79                	LD	A,C
01C5  18 E8             	JR 	SAVEIT
01C7  3E 20             LAST1	LD	A, SPACE
01C9  CD 9202           	CALL	_ECHO
01CC  C1                	POP	BC
01CD  FDE9              	JP	(IY)	; Return to NEXT inner interpreter.

                        ; Push 20h to stack, will pop into BC in TOKEN, and BC will be 0020h
01CF  D101              ASPACE	DW	$ + 2
01D1  11 2000           	LD	DE, 20h
01D4  D5                	PUSH	DE
01D5  FDE9              	JP	(IY)	


01D7  05544F4B          	DB 5,'TOK'	; TOKEN ID
01DB  8C02              	DW	EXECUTE
01DD  DF01              TOKEN	DW	$ + 2
01DF  D9                	EXX 	; Save IR (EXX exchanges BC, DE, and HL with shadow registers with BC', DE', and HL'.)
01E0  2A C102           	LD	HL,(LBP) ; pointer to token
01E3  ED5B 8204         	LD	DE,(DP) ; pointer to Dictionary
01E7  C1                	POP 	BC	; space left by ASPACE
01E8  3E 20             	LD	A,20H 	; space code
01EA  B9                	CP	C 	; space?
01EB  20 06             	JR 	NZ, TOK
01ED  BE                IGNLB	CP	(HL)
01EE  20 03             	JR	NZ,TOK
01F0  2C                	INC	L
01F1  18 FA             	JR 	IGNLB
01F3  E5                TOK	PUSH	HL
01F4  04                COUNT	INC	B
01F5  2C                	INC 	L
01F6  7E                	LD 	A,(HL)
01F7  B9                	CP 	C
01F8  28 04             	JR 	Z,ENDTOK
01FA  17                	RLA
01FB  30 F7             	JR 	NC,COUNT
01FD  2D                	DEC	L
01FE  2C                ENDTOK	INC	L
01FF  22 C102           	LD 	(LBP), HL
0202  78                	LD	A,B
0203  12                	LD	(DE), A
0204  13                	INC	DE
0205  E1                	POP	HL
0206  48                	LD 	C,B
0207  06 00             	LD 	B,0
0209  EDB0              	LDIR  		; Move token to dictionary
020B  D9                	EXX
020C  FDE9              	JP 	(IY)


                        ; SEARCH Primitive
020E  06534541                  DB      6,'SEA'
0212  DD01                      DW      TOKEN
0214  1602              SEARCH  DW      $ + 2
0216  D9                        EXX     ; save registers
0217  E1                        POP     HL      ; start of header
0218  E5                TESTIT  PUSH    HL      ; save start of header
0219  ED5B 8204                 LD      DE,(DP)         ;dictionary pointer.
021D  0E 00                     LD      C, 0    ; used with B as false flag
021F  1A                        LD      A,(DE)  ;get dictionary token length
0220  BE                        CP      (HL)    ; same as keyword length?
0221  C2 3B02                   JP      NZ, NXTHDR      ; go to next entry in linked list.
0224  FE 04                     CP      4       ; Is length over 3?
0226  38 02                     JR      C, BEL04        ; skip set 3
0228  3E 03                     LD      A, 3    ; length = 3
022A  47                BEL04   LD      B, A
022B  23                NEXTCH  INC     HL      ; Bump header
022C  13                        INC     DE      ; bump dictionary pointer.
022D  1A                        LD      A, (DE) ; next character
022E  BE                        CP      (HL)
022F  20 0A                     JR      NZ, NXTHDR      ; Go to next header entry.
0231  10 F8                     DJNZ    NEXTCH          ; next character
0233  E1                        POP     HL      ; start of found header
0234  11 0600                   LD      DE,6    ; start plus 6
0237  19                        ADD     HL,DE   ; == Word Address
0238  E5                        PUSH    HL      ; push WA; BC = 0 for Flag.
0239  18 0F                     JR      FLAG
023B  E1                NXTHDR  POP     HL      ; start of current header
023C  11 0400                   LD      DE,4    ; plus 4 == Link Address (pointer to next entry)
023F  19                        ADD     HL, DE  ; To Next keyword
0240  5E                        LD      E, (HL) ; get link address
0241  23                        INC     HL
0242  56                        LD      D, (HL)
0243  EB                        EX      DE, HL
0244  7C                        LD      A, H
0245  B5                        OR      L
0246  20 D0                     JR      NZ, TESTIT ; not 0, test next header.
0248  0E 01                     LD      C, 1    ; false
024A  C5                FLAG    PUSH    BC      ; push flag
024B  D9                        EXX             ;Restore registers
024C  FDE9                      JP      (IY)    ; back to NEXT

                        ;
                        ; ?SEARCH - Secondary to search dictionary.
024E                    QSEARCH

                        ; ABSENT?
                        ; - NO -> ?EXECUTE -> ASPACE
                        ; - YES -> NUMBER

                        ; ?EXECUTE - Execute Secondary.
024E  5002              QEXECUTE	DW $ + 2
0250  00                	NOP
0251  FDE9              	JP (IY)

0253  5502              QNUMBER		DW $ + 2
0255  00                	NOP
0256  FDE9              	JP (IY)

0258  5A02              @IF	DW $ + 2
025A  00                	NOP
025B  FDE9              	JP (IY)

                        ; For Z80 MC - DDT was changed to use RST 6 since the hardware uses RST 7.
                        ; For Standard CP/M
025D  5F02              TILHALT	DW	$ + 2
                        	IF STD_CPM = 1
                        	ELSE
025F  F7                	RST 	6
                        	ENDIF


                        ; INVALID NUMBER?
                        ; NO -> ASPACE
                        ; YES -> QUESTION

                        ; QUESTION
0260  6202              QUESTION	DW	$ + 2
0262  2A 8204           	LD 	HL,(DP)
0265  23                	INC 	HL
0266  CB7E              	BIT	7,(HL)	; IF BIT SET, A TERMINATOR
0268  28 06             	JR	Z,ERROR	;NOT SET ERROR
026A  11 8202           	LD	DE,OK
026D  D5                	PUSH	DE
026E  FDE9              	JP	(IY)
0270  CD B202           ERROR	CALL	_CRLF
0273  FD21 7A02         	LD	IY,RETURN
0277  C3 6301           	JP	TYPE
027A  11 8002           RETURN	LD	DE, QMSG
027D  C3 8502           	JP	_PATCH

                        ; GOTO TYPE


                        ; Internals

0280  3F00              QMSG	DB	'?', 0
0282  4F4B00            OK	DB	'OK',0

                        ; PATCH internal routine.
0285  00                _PATCH	DB	0



                        ; EXECUTE primitive needs a dictionary entry for defining words.
                        ; This is a model for all other Primitive words that will be added to the dictionary
                        ;
0286  07455845          	DB	7,'E','X','E'	; Header for dictionary search
028A  0000              	DW	0		; Link address 0000 == End of Linked List.
028C  8E02              EXECUTE DW	$ + 2		; Address of EXECUTE.
028E  E1                	POP	HL		; primitive code.
028F  C3 4F01           	JP	RUN

                        ;----------------------------------------
                        ; CP/M Machine Specific routines
                        ;
                        ; *   Internal Routines interfacing with Operating System.
                        ; * _ECHO - Echo a character to terminal
                        ; * _KEY - Read a key from terminal
                        ; * _CRLF - Output CR/LF to terminal
                        ;----------------------------------------
                        ;; Handy Constants
      = 000D            CR	EQU     0DH
      = 000A            LF	EQU     0AH
      = 0024            DOLLAR  EQU     24H
      = 001B            ESC     EQU     1BH
      = 0003            CTRLC   EQU     03H

                        ; Screen print calls
      = 0003            CHAR_IN EQU     03H
      = 000B            C_STAT  EQU     0BH
      = 0006            C_RAWIO EQU     06H

                        ; til has own write str using _ECHO
                        ;WRITESTR        EQU     9H
      = 0002            PRTCHR  EQU     02H
      = 0005            BDOS    EQU     05H

                        ; Output one character.
                        ; A = Input Char.
                        ; preserve BC register.
                        ; preserve HL register.
0292                    _ECHO
0292  E5                	PUSH HL
0293  C5                        PUSH BC
0294  D5                	PUSH DE
0295  57                	LD D,A
0296  5F                	LD E,A
0297  0E 02                     LD C, PRTCHR
0299  CD 0500                   CALL BDOS
029C  D1                        POP DE
029D  C1                	POP BC
029E  E1                	POP HL
029F  C9                        RET

                        ; Get a key
02A0                    _KEY
                        ; Preserve BC, DE, and HL.
02A0  C5                	PUSH	BC
02A1  D5                	PUSH	DE
02A2  E5                	PUSH	HL
02A3  0E 06             WAITKEY LD	C, C_RAWIO
02A5  11 FFFF                   LD	DE,FFFFh
02A8  CD 0500                   CALL    BDOS
02AB  B7                        OR 	A
02AC  28 F5                     JR 	Z,WAITKEY
02AE  E1                	POP	HL
02AF  D1                        POP	DE
02B0  C1                        POP	BC
                        ; Character returned in A register.
02B1  C9                        RET

                        ; Output CR LF to console.
02B2                    _CRLF
02B2  F5                	PUSH AF
02B3  3E 0D             	LD A, CR
02B5  CD 9202           	CALL _ECHO
02B8  3E 0A             	LD A, LF
02BA  CD 9202           	CALL _ECHO
02BD  F1                	POP AF
02BE  C9                        RET

                        ; Constants
                        ;
      = 0018            LINEDEL	EQU	18H	; ctrl-x line delete
      = 0020            SPACE	EQU	20h	; space
      = 0008            BKSP	EQU	08h	; ctrl-H backspace

                        ; Variables
02BF  00                BASE	DB	0	; BASE for restart/warm start
02C0  00                MODE	DB	0	; MODE
02C1  0000              LBP	DW	0 	; line buffer pointer
      = 0080            LENGTH	EQU	128	; buffer length
0400                    	ORG	400h	; put on page boundary
0400   (0080)           LBADD	DS	128	; text input buffer
0480  0000              LBEND	DW	0

                        ; Dictonary pointer
0482  A704              DP	DW	DICT
      = 8000            STACK	EQU	8000h

                        ; Strings
0484  0C205449 4C205245 RSTMSG	DB	12, ' TIL RESTART'
048C  53544152 54
0491  15205745 4C434F4D SRTMSG	DB	21, ' WELCOME TO RETRO TIL'
0499  4520544F 20524554
04A1  524F2054 494C


04A7   (0FA0)           DICT    DS      4000




1447   (0000)           	END	0000

@IF                0258    ABORT              0111    ASPACE             01CF
BASE               02BF    BDOS               0005 E  BEL04              022A
BKSP               0008 E  CHAR_IN            0003 E  CLEAR              0185
COLON              0155    COUNT              01F4    CR                 000D E
CTRLC              0003 E  C_RAWIO            0006 E  C_STAT             000B E
DICT               04A7    DOLLAR             0024 E  DP                 0482
ENDTOK             01FE    ERROR              0270    ESC                001B E
EXECUTE            028C    FLAG               024A    IEND               01BD
IGNLB              01ED    INKEY              018C    INLINE             0177
ISSUE              01A2    ISTART             017A    LAST1              01C7
LBADD              0400    LBEND              0480    LBP                02C1
LENGTH             0080 E  LF                 000A E  LINEDEL            0018 E
MODE               02C0    NEXT               0149    NEXTCH             022B
NOTLC              01BA    NXTHDR             023B    OK                 0282
ONECHAR            016B    OUTER              012F    PRTCHR             0002 E
QEXECUTE           024E    QMSG               0280    QNUMBER            0253
QSEARCH            024E    QUESTION           0260    RETURN             027A
RSTMSG             0484    RUN                014F    SAVEIT             01AF
SEARCH             0214    SEMI               013D    SPACE              0020 E
SRTMSG             0491    STACK              8000 E  START              0100
STD_CPM            0000 E  TESTIT             0218    TILHALT            025D
TOK                01F3    TOKEN              01DD    TSTBS              0198
TSTCR              01A7    TYPE               0163    TYPEIT             0165
WAITKEY            02A3    ZERO               018A    _CRLF              02B2
_ECHO              0292    _KEY               02A0    _PATCH             0285
