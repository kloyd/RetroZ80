---------------------------------------------
Z80 ASSEMBLER LISTING
Line   Addr Opcode      Label   Instruction
---------------------------------------------
0001   0000             ; TIL
0002   0000             ; Outer Interpreter
0003   0000             
0004   0000             ; TIL
0005   0000             
0006   0000             ; START/RESTART
0007   0000             	ORG	$8000
0008   8000             
0009   8000 11 46 81    START	LD	DE,RSTMSG
0010   8003 3A BE 80    	LD	A,(BASE)
0011   8006 A7          	AND	A
0012   8007 20 08       	JR	NZ, ABORT
0013   8009 3E 0A       	LD	A,10
0014   800B 32 BE 80    	LD	(BASE),A
0015   800E 11 53 81    	LD	DE,SRTMSG
0016   8011 31 00 F0    ABORT	LD	SP,STACK
0017   8014 D5          	PUSH	DE
0018   8015 21 00 00    	LD	HL,0
0019   8018 22 BF 80    	LD	(MODE),HL
0020   801B FD 21 95 80 	LD	IY,NEXT
0021   801F DD 21 7B 80 	LD	IX,RETURN
0022   8023 21 90 1F    	LD	HL,8080
0023   8026 22 C2 80    	LD	(LBEND),HL
0024   8029 01 2F 80    	LD	BC,OUTER	; Effectively, Set OUTER as the next routine
0025   802C C3 95 80    	JP	NEXT		; Call NEXT in the Inner Interpreter, which will load address of OUTER and Jump to it.
0026   802F             
0027   802F             
0028   802F             ; TYPE
0029   802F             OUTER
0030   802F             
0031   802F             ; INLINE
0032   802F 31 80       INLINE	DW	$ + 2	;header address
0033   8031 C5          ISTART	PUSH	BC
0034   8032 CD 82 80    	CALL	_CRLF	; Issue CR / LF on terminal for new input
0035   8035 21 42 81    	LD	HL, LBADD	; Buffer
0036   8038 22 C0 80    	LD	(LBP), HL
0037   803B 06 80       	LD	B, LENGTH
0038   803D 36 20       CLEAR	LD	(HL), 20H
0039   803F 23          	INC	HL
0040   8040 10 FB       	DJNZ	CLEAR
0041   8042 2E 00       ZERO	LD	L,0
0042   8044 CD BA 80    INKEY	CALL	_KEY
0043   8047 FE 18       	CP	18H	; CTRL-X is Line Delete
0044   8049 20 05       	JR	NZ,TSTBS
0045   804B CD BC 80    	CALL	_ECHO
0046   804E 18 E1       	JR ISTART
0047   8050 FE 08       TSTBS	CP	08H	; backspace CTRL-H
0048   8052 20 0B       	JR	NZ, TSTCR
0049   8054 2B          	DEC	HL
0050   8055 FA 42 80    	JP	M,ZERO
0051   8058 36 20       	LD	(HL), 20H
0052   805A CD BC 80    ISSUE	CALL	_ECHO
0053   805D 18 E5       	JR	INKEY
0054   805F FE 0D       TSTCR	CP	0DH	; CR
0055   8061             
0056   8061             
0057   8061             ; ASPACE
0058   8061             
0059   8061             ; TOKEN
0060   8061             
0061   8061             ; ?SEARCH
0062   8061             
0063   8061             ; ABSENT?
0064   8061             ; - NO -> ?EXECUTE -> ASPACE
0065   8061             ; - YES -> NUMBER
0066   8061             
0067   8061             ; ?EXECUTE
0068   8061             
0069   8061             ; ?NUMBER
0070   8061             
0071   8061             ; INVALID NUMBER?
0072   8061             ; NO -> ASPACE
0073   8061             ; YES -> QUESTION
0074   8061             
0075   8061             ; QUESTION
0076   8061             QUESTION
0077   8061 63 80       	DW	$+2
0078   8063 2A 44 81    	LD 	HL,(DP)
0079   8066 23          	INC 	HL
0080   8067 CB 7E       	BIT	7,(HL)	; IF BIT SET, A TERMINATOR
0081   8069 28 06       	JR	Z,ERROR	;NOT SET ERROR
0082   806B 11 85 80    	LD	DE,OK
0083   806E D5          	PUSH	DE
0084   806F FD E9       	JP	(IY)
0085   8071 CD 82 80    ERROR	CALL	_CRLF
0086   8074 FD 21 7B 80 	LD	IY,RETURN
0087   8078 C3 81 80    	JP	_TYPE
0088   807B 11 83 80    RETURN	LD	DE, QMSG
0089   807E C3 88 80    	JP	_PATCH
0090   8081             
0091   8081             ; GOTO TYPE
0092   8081             
0093   8081             
0094   8081             ; Internals
0095   8081 00          _TYPE	DB	0
0096   8082 00          _CRLF	DB	0
0097   8083 3F 00       QMSG	DB	'?', 0
0098   8085 4F 4B 00    OK	DB	'OK',0
0099   8088             
0100   8088             ; PATCH internal routine.
0101   8088 00          _PATCH	DB	0
0102   8089             
0103   8089             ; Inner Interpreter
0104   8089             
0105   8089 8B 80       SEMI	DW	$ + 2
0106   808B DD 4E 00    	LD	C,(IX+0)
0107   808E DD 23       	INC	IX
0108   8090 DD 46 00    	LD	B,(IX+0)
0109   8093 DD 23       	INC	IX
0110   8095 0A          NEXT	LD	A,(BC)
0111   8096 6F          	LD	L,A
0112   8097 03          	INC	BC
0113   8098 0A          	LD	A,(BC)
0114   8099 67          	LD	H,A
0115   809A 03          	INC	BC
0116   809B 5E          RUN	LD	E,(HL)
0117   809C 23          	INC	HL
0118   809D 56          	LD	D,(HL)
0119   809E 23          	INC	HL
0120   809F EB          	EX	DE,HL
0121   80A0 E9          	JP	(HL)
0122   80A1             
0123   80A1 DD 2B       COLON	DEC	IX
0124   80A3 DD 70 00    	LD	(IX+0),B
0125   80A6 DD 2B       	DEC	IX
0126   80A8 DD 71 00    	LD	(IX+0),C
0127   80AB 4B          	LD	C,E
0128   80AC 42          	LD	B,D
0129   80AD FD E9       	JP	(IY)
0130   80AF             
0131   80AF             ; EXECUTE primitive needs a dictionary entry for defining words.
0132   80AF             ; This is a model for all other Primitive words that will be added to the dictionary
0133   80AF             ;
0134   80AF 07 45 58 45 	DB	7,'E','X','E'	; Header for dictionary search
0135   80B3 00 00       	DW	0		; Link address 0000 == End of Linked List.
0136   80B5 B7 80       EXECUTE DW	$ + 2		; Address of EXECUTE.
0137   80B7 E1          	POP	HL		; primitive code.
0138   80B8 18 E1       	JR	RUN
0139   80BA             
0140   80BA             ; ***
0141   80BA             ; Machine Specific routines
0142   80BA             ; KEY
0143   80BA 00 00       _KEY	DW	0
0144   80BC             
0145   80BC             
0146   80BC             ; ECHO
0147   80BC 00 00       _ECHO	DW	0
0148   80BE             
0149   80BE             
0150   80BE             ; Constants
0151   80BE             ;
0152   80BE             LINEDEL	EQU	18H	; ctrl-x line delete
0153   80BE             
0154   80BE             ; Variables
0155   80BE 00          BASE	DB	0	; BASE for restart/warm start
0156   80BF 00          MODE	DB	0	; MODE
0157   80C0 00 00       LBP	DW	0 	; line buffer pointer
0158   80C2             LENGTH	EQU	128	; buffer length
0159   80C2 00 00 00 00 LBEND	DS	128	; text input buffer
0159   80C6 00 00 00 00 
0159   80CA 00 00 00 00 
0159   80CE 00 00 00 00 
0159   80D2 00 00 00 00 
0159   80D6 00 00 00 00 
0159   80DA 00 00 00 00 
0159   80DE 00 00 00 00 
0159   80E2 00 00 00 00 
0159   80E6 00 00 00 00 
0159   80EA 00 00 00 00 
0159   80EE 00 00 00 00 
0159   80F2 00 00 00 00 
0159   80F6 00 00 00 00 
0159   80FA 00 00 00 00 
0159   80FE 00 00 00 00 
0159   8102 00 00 00 00 
0159   8106 00 00 00 00 
0159   810A 00 00 00 00 
0159   810E 00 00 00 00 
0159   8112 00 00 00 00 
0159   8116 00 00 00 00 
0159   811A 00 00 00 00 
0159   811E 00 00 00 00 
0159   8122 00 00 00 00 
0159   8126 00 00 00 00 
0159   812A 00 00 00 00 
0159   812E 00 00 00 00 
0159   8132 00 00 00 00 
0159   8136 00 00 00 00 
0159   813A 00 00 00 00 
0159   813E 00 00 00 00 
0160   8142 00 00       LBADD	DW	0
0161   8144             
0162   8144             ; Dictonary pointer
0163   8144 00 00       DP	DW	0
0164   8146             
0165   8146             ; Strings
0166   8146 20 54 49 4C RSTMSG	DB	' TIL RESTART', 0
0166   814A 20 52 45 53 
0166   814E 54 41 52 54 
0166   8152 00          
0167   8153 20 57 45 4C SRTMSG	DB	' WELCOME TO RETRO TIL',0
0167   8157 43 4F 4D 45 
0167   815B 20 54 4F 20 
0167   815F 52 45 54 52 
0167   8163 4F 20 54 49 
0167   8167 4C 00       
0168   8169             
0169   8169             ; Stack grows down... set this at F000
0170   8169             	ORG	$F000
0171   F000             ;STK	DS	255
0172   F000 00          STACK	DB	0
0173   F001             
0174   F001             
0175   F001             
0176   F001             
Number of errors = 0
